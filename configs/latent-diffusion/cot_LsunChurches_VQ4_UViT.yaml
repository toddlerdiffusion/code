model:
  base_learning_rate: 20.0e-5   # set to target_lr by starting main.py with '--scale_lr False' 5.0e-5
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    linear_start: 0.0015
    linear_end: 0.0155
    num_timesteps_cond: 1
    log_every_t: 5
    timesteps: 50
    loss_type: l1  # [l1, l2, cls]
    first_stage_key: "image"
    cond_stage_key: "sketch"  # ['edges', 'sam', 'sketch', 'RGB', 'BlackBinary', 'Black'] 'BlackBinary' works in the image space.
    binary_out: False  # 
    identity_epochs: 0  # [0, int] --> zero mean it is deactivated
    l_simple_weight: 1.
    contrast_patch_loss_flag: False  # ["True", "False"]    True--> Activate the Contrastive Pathc based loss.
    l_contrast_patch_loss_weight: 0.0
    parameterization: "x0"  # ["eps", "x0", "XtminX0", "YandN", "Weps", "WYandN"]  "eps" means only noise "XtminX0" only for BBDM case means (Xt-X0) term
    CoT_flag: True  # ["True", "False"]    True--> Activate DDPM.   False--> Original LDM
    steps_gap: 1
    CoT_timesteps: 50
    BBDM_noise: 2  # [0.5, 2, 8]   0.25--> for 1st stage and "triangle".   (Works only for CoT)
    BBDM_noise_schedule: "bridge" # ["bridge", "log", "linear", "triangle"] Works only for CoT
    image_size: 64
    channels: 3  # defualt 3 but should be set to one, if binary is activated
    cond_stage_trainable: False
    concat_mode: False
    conditioning_key: "None"  # ['None', 'concat', 'crossattn']
    beta_schedule: "linear"  # Skewed-BBDM  ["linear", "sin"]
    forward_type: "weighting"  # ["weighting", "pixelate"]
    highres_distill_loss: false
    scale_by_std: True
    monitor: 'val/loss_simple_ema'

    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [10000]
        cycle_lengths: [10000000000000]
        f_start: [1.e-6]
        f_max: [1.]
        f_min: [ 1.]

    unet_config:
      target: ldm.modules.diffusionmodules.uvit.UViT
      params:
        img_size: 64
        patch_size: 4
        in_chans: 3  # in UViT in_channels=out_channels
        embed_dim: 512
        depth: 12
        num_heads: 8
        mlp_ratio: 4
        qkv_bias: False
        mlp_time_embed: False
        num_classes: -1
        use_checkpoint: True

    first_stage_config:
      target: ldm.models.autoencoder.VQModelInterface
      #target: ldm.models.autoencoder.IdentityFirstStage  # Image Space
      params:
        embed_dim: 3
        n_embed: 8192
        monitor: "val/rec_loss"
        ckpt_path: "models/first_stage_models/vq-f4/model.ckpt"
        ddconfig:
          double_z: false
          z_channels: 3
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult: [ 1,2,4]  # num_down = len(ch_mult)-1 # [ 1,2,4]  # meduim --> [1,2,2]
          num_res_blocks: 2  # 2  # meduim --> 1
          attn_resolutions: [ ]
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config: "__is_unconditional__"
    #cond_stage_config: "__is_first_stage__"
    #cond_stage_config:
    #  target: ldm.modules.encoders.modules.ConvNextImageEmbedder
    #  params:
    #    img_encoder: "raw_img"  # "convnextv2" or "raw_img"
    #    freeze: True
    #    unet_res: 64

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 64  # 72 / 60
    num_workers: 8
    wrap: False
    train:
      target: ldm.data.lsun.LSUNChurchesCoT
      params:
        txt_file: "data/lsun/church_outdoor_train.txt"
        data_root: "data/lsun/churches"
        size: 256
        flip_p: 0.5
        aug_y_p: 0  # Integer represents percentage of augmentation for each type. Total = N*aug_y
        aug_types: [] # ["masking", "downsampling", "edges"]
        drop_y_p: 0  # Integer represents percentage of dropout the condition totaly and replace it by black image.
        cot_stages: ["sketch"]  # ['edges', 'sam', 'sam_edges', 'sketch', 'RGB', 'BlackBinary', 'Black'] 'randBW'--> Random Black and White.
        cot_process_type: "with_norm"  # ["with_norm", "no_norm"] --> "with_norm" should be with raw image
        binary_y: True  # If true will convert the input condition (y) to binary input
        add_noise_y: True  # If true then we will add a noise on the condition y to implement the truncation trick for fusion
        gray_y: False  # 1D vs 3D
        truncation_ratio: -1  # [0.025, 0.05, 0.1]
        timesteps: 100
        timesteps_1ststage: 200
        gray_flg: False  # [True, False]
        palette: False # [True, False]  If activated --> will add palette to the input (e.g., sketch) Will get the palette from pixilation.
    validation:
      target: ldm.data.lsun.LSUNChurchesCoT
      params:
        txt_file: "data/lsun/church_outdoor_val.txt"
        data_root: "data/lsun/churches"
        flip_p: 0.0
        aug_y_p: 0  # Integer represents percentage of augmentation for each type. Total = N*aug_y
        aug_types: []
        drop_y_p: 0  # Integer represents percentage of dropout the condition totaly and replace it by black image.
        size: 256
        cot_stages: ["sketch"]  # ['edges', 'sam', 'sam_edges', 'sketch', 'RGB', 'BlackBinary', 'Black'] 'randBW'--> Random Black and White.
        cot_process_type: "with_norm"  # ["with_norm", "no_norm"] --> "with_norm" should be with raw image
        binary_y: True  # If true will convert the input condition (y) to binary input
        add_noise_y: False  # If true then we will add a noise on the condition y to implement the truncation trick for fusion
        gray_y: False
        truncation_ratio: -1  # [0.025, 0.05, 0.1]
        timesteps: 100
        timesteps_1ststage: 200
        gray_flg: False  #[True, False]
        palette: False # [True, False]  If activated --> will add palette to the input (e.g., sketch) Will get the palette from pixilation.

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 1
        max_images: 12
        increase_log_steps: False


  trainer:
    benchmark: True
    max_epochs: 1000
