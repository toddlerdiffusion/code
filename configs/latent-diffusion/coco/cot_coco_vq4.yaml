model:
  base_learning_rate: 5.0e-05
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    linear_start: 0.0015
    linear_end: 0.0195
    num_timesteps_cond: 1
    log_every_t: 5
    timesteps: 50
    loss_type: l2  # [l1, l2, cls]
    first_stage_key: image
    cond_stage_key: "caption"
    cot_stage_key: "sketch"  # ['edges', 'sam', 'sketch', 'RGB', 'BlackBinary', 'Black'] 'BlackBinary' works in the image space.
    binary_out: False  # 
    identity_epochs: 0  # [0, int] --> zero mean it is deactivated
    l_simple_weight: 1.
    contrast_patch_loss_flag: False  # ["True", "False"]    True--> Activate the Contrastive Pathc based loss.
    l_contrast_patch_loss_weight: 0.0
    parameterization: "x0"  # ["eps", "x0", "XtminX0", "YandN", "Weps", "WYandN"]  "eps" means only noise "XtminX0" only for BBDM case means (Xt-X0) term
    CoT_flag: True  # ["True", "False"]    True--> Activate DDPM.   False--> Original LDM
    steps_gap: 1
    CoT_timesteps: 50
    BBDM_noise: 2  # [0.5, 2, 8]   0.25--> for 1st stage and "triangle".   (Works only for CoT)
    BBDM_noise_schedule: "bridge" # ["bridge", "log", "linear", "triangle"] Works only for CoT
    image_size: 64
    channels: 3  # defualt 3 but should be set to one, if binary is activated
    cond_stage_trainable: False
    cot_stage_trainable: False
    concat_mode: False
    beta_schedule: "linear"  # Skewed-BBDM  ["linear", "sin"]
    forward_type: "weighting"  # ["weighting", "pixelate"]
    highres_distill_loss: false
    conditioning_key: "crossattn"  # ['None', 'concat', 'crossattn']
    monitor: val/loss_simple_ema

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 64
        in_channels: 3
        out_channels: 3
        model_channels: 128
        attention_resolutions: [ 2, 4, 8]  # Large-->[ 2, 4, 8] (32, 16, 8)  Medium-->[8] Small-->[8]
        num_res_blocks: 2  # Large-->2  Medium-->1  Small-->0
        channel_mult: [1, 2, 3, 4]  # XLarge--> [ 1, 4, 8]  Large--> [1,2,3,4]  Medium-->[1,2,3,4]  Small-->[1, 1, 1,1]
        num_heads: 8
        use_spatial_transformer: true
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: true
        legacy: False

    first_stage_config:
      target: ldm.models.autoencoder.VQModelInterface
      params:
        embed_dim: 3
        n_embed: 8192
        ckpt_path: models/first_stage_models/vq-f4/model.ckpt
        ddconfig:
          double_z: false
          z_channels: 3
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity
        load_precomp_emd: True

    #cond_stage_config: "__is_unconditional__"
    
    #cond_stage_config:
    #  target: ldm.modules.encoders.modules.BERTEmbedder
    #  params:
    #    n_embed: 640
    #    n_layer: 32

    cond_stage_config:
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder_HuggingFace
      params:
        version: 'openai/clip-vit-large-patch14'
        load_precomp_emd: True

    #cond_stage_config:
    #  target: ldm.modules.encoders.modules.T5TextEncoder
    #  params:
    #    variant: 't5-base'

    cot_stage_config: "__is_unconditional__"

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 64
    num_workers: 16
    wrap: false
    train:
      target: ldm.data.coco.CoT_COCO_load_emb
      params:
        img_emb_path: "/xxx/scratch/xxx/COCO_dataset_embedding/train2017_vq4"
        txt_emb_path: "/xxx/scratch/xxx/COCO_dataset_embedding/train2017_cliptxt"
        caption_root: "/xxx/ai/reference/CV/COCO/cocoapi/data/2017/annotations/captions/train/captions_train2017.json"
        imageid2filename_dict_path: "data/coco/coco_train_imgid2name_dict.json"
        data_root: "/xxx/scratch/xxx/COCO_dataset/train"
        size: 256
        flip_p: 0.5
        aug_y_p: 0  # Integer represents percentage of augmentation for each type. Total = N*aug_y
        aug_types: [] # ["masking", "downsampling", "edges"]
        drop_y_p: 0  # Integer represents percentage of dropout the condition totaly and replace it by black image.
        cot_stages: ["sketch"]  # ['edges', 'sam', 'sam_edges', 'sketch', 'RGB', 'BlackBinary', 'Black'] 'randBW'--> Random Black and White.
        cot_process_type: "with_norm"  # ["with_norm", "no_norm"] --> "with_norm" should be with raw image
        binary_y: True  # If true will convert the input condition (y) to binary input
        add_noise_y: True  # If true then we will add a noise on the condition y to implement the truncation trick for fusion
        gray_y: False  # 1D vs 3D
        truncation_ratio: -1  # [0.025, 0.05, 0.1]
        timesteps: 100
        timesteps_1ststage: 200
        gray_flg: False  # [True, False]
        palette: False # [True, False]  If activated --> will add palette to the input (e.g., sketch) Will get the palette from pixilation.
    validation:
      target: ldm.data.coco.CoT_COCO_load_emb
      params:
        img_emb_path: "/xxx/scratch/xxx/COCO_dataset_embedding/val2017_vq4"
        txt_emb_path: "/xxx/scratch/xxx/COCO_dataset_embedding/val2017_cliptxt"
        caption_root: "/xxx/ai/reference/CV/COCO/cocoapi/data/2017/annotations/captions/val/captions_val2017.json"
        imageid2filename_dict_path: "data/coco/coco_val_imgid2name_dict.json"
        data_root: "/xxx/scratch/xxx/COCO_dataset/val2017"
        size: 256
        flip_p: 0.0
        aug_y_p: 0  # Integer represents percentage of augmentation for each type. Total = N*aug_y
        aug_types: []
        drop_y_p: 0  # Integer represents percentage of dropout the condition totaly and replace it by black image.
        cot_stages: ["sketch"]  # ['edges', 'sam', 'sam_edges', 'sketch', 'RGB', 'BlackBinary', 'Black'] 'randBW'--> Random Black and White.
        cot_process_type: "with_norm"  # ["with_norm", "no_norm"] --> "with_norm" should be with raw image
        binary_y: True  # If true will convert the input condition (y) to binary input
        add_noise_y: False  # If true then we will add a noise on the condition y to implement the truncation trick for fusion
        gray_y: False
        truncation_ratio: -1  # [0.025, 0.05, 0.1]
        timesteps: 100
        timesteps_1ststage: 200
        gray_flg: False  #[True, False]
        palette: False # [True, False]  If activated --> will add palette to the input (e.g., sketch) Will get the palette from pixilation.


lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 1
        max_images: 8
        increase_log_steps: False

  trainer:
    benchmark: True
    max_epochs: 650