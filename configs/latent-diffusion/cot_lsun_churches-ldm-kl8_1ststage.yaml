model:
  base_learning_rate: 5.0e-5   # set to target_lr by starting main.py with '--scale_lr False' 5.0e-5
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    linear_start: 0.0015
    linear_end: 0.0155
    num_timesteps_cond: 1
    log_every_t: 100
    timesteps: 1000
    loss_type: l1  # [l1, l2, cls]
    first_stage_key: "image"
    cond_stage_key: "Black1D"  # ['edges', 'sam', 'sketch', 'RGB', 'Black1D', 'Black_White']
    l1_sketch_w: 1  # 1--> to disable it (balanced loss for black & white) int--> to weight the white pixels
    binary_out: False  # Not used :D (will be cleaned later)
    binary_noise: False  # False-->Gausian    True-->bernoulli
    masking_noise_p: 0.0  # Masking Ratio Percentage 
    aug_x: ""  # ["masking", "downsampling"]  # apply this function in the forward process on the output x0
    identity_epochs: 0  # [0, int] --> zero mean it is deactivated
    l_simple_weight: 1.
    contrast_patch_loss_flag: False  # ["True", "False"]    True--> Activate the Contrastive Pathc based loss.
    l_contrast_patch_loss_weight: 0.0
    parameterization: "x0"  # ["eps", "x0", "comp"]  "eps" means only noise "comp" only for BBDM case means noise+complex term
    CoT_flag: True  # ["True", "False"]    True--> Activate DDPM.   False--> Original LDM
    steps_gap: 1
    CoT_timesteps: 1000
    BBDM_noise: 0.25  # [0.5, 2, 8]   0.25--> for 1st stage and "triangle".   (Works only for CoT)
    BBDM_noise_schedule: "linear" # ["bridge", "log", "linear", "triangle"] Works only for CoT
    image_size: 32
    channels: 3  # defualt 3 but should be set to one, if binary is activated
    cond_stage_trainable: False
    concat_mode: False
    conditioning_key: "None"  # ['None', 'concat', 'crossattn']
    beta_schedule: "linear"  # Skewed-BBDM  ["linear", "sin"]
    forward_type: "weighting"  # ["weighting", "pixelate"]
    highres_distill_loss: false
    scale_by_std: True
    monitor: 'val/loss_simple_ema'

    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [10000]
        cycle_lengths: [10000000000000]
        f_start: [1.e-6]
        f_max: [1.]
        f_min: [ 1.]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 32
        in_channels: 4
        out_channels: 4
        model_channels: 192
        attention_resolutions: [ 1, 2, 4, 8 ]   # 32, 16, 8, 4
        num_res_blocks: 2
        channel_mult: [ 1,2,2,4,4 ]  # 32, 16, 8, 4, 2
        num_heads: 8
        use_scale_shift_norm: True
        resblock_updown: True
        use_spatial_transformer: false  # this is for the spatial attention. Must set to activate 'crossattn'
        #transformer_depth: 1  # this is for the spatial attention. Must set to activate 'crossattn'
        #context_dim: 3  # this is for the spatial attention. Must set to activate 'crossattn'
        invertedresidual_flag: False  # if true the InvertedResidual will be used otherwise the normal ResNet block will be used.
        #num_head_channels: 64

    #first_stage_config:
    #  target: ldm.models.autoencoder.IdentityFirstStage  # Image Space
    #  params:
    #    size: 32

    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: "val/rec_loss"
        ckpt_path: "models/first_stage_models/kl-f8/model.ckpt"
        ddconfig:
          double_z: True
          z_channels: 4
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult: [ 1,2,4,4 ]  # num_down = len(ch_mult)-1
          num_res_blocks: 2
          attn_resolutions: [ ]
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config: "__is_unconditional__"
    #cond_stage_config: "__is_first_stage__"
    #cond_stage_config:
    #  target: ldm.modules.encoders.modules.ConvNextImageEmbedder
    #  params:
    #    img_encoder: "raw_img"  # "convnextv2" or "raw_img"
    #    freeze: True
    #    unet_res: 64

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 64  # 96
    num_workers: 8
    wrap: False
    train:
      target: ldm.data.lsun.LSUNChurchesCoT
      params:
        txt_file: "data/lsun/church_outdoor_train.txt"
        data_root: "data/lsun/churches"
        size: 256
        flip_p: 0.5
        aug_y_p: 0  # Integer represents percentage of augmentation for each type. Total = N*aug_y
        aug_types: []
        drop_y_p: 0  # Integer represents percentage of dropout the condition totaly and replace it by black image.
        cot_stages: ["Black1D"]  # ['edges', 'sam', 'sam_edges', 'sketch', 'RGB', 'Black1D', 'Black_White']
        cot_process_type: "with_norm"  # ["with_norm", "no_norm"] --> "with_norm" should be with raw image
        gray_flg: False  # [True, False]
        palette: False # [True, False]  If activated --> will add palette to the input (e.g., sketch) Will get the palette from pixilation.
    validation:
      target: ldm.data.lsun.LSUNChurchesCoT
      params:
        txt_file: "data/lsun/church_outdoor_val.txt"
        data_root: "data/lsun/churches"
        flip_p: 0.0
        aug_y_p: 0  # Integer represents percentage of augmentation for each type. Total = N*aug_y
        aug_types: []
        drop_y_p: 0  # Integer represents percentage of dropout the condition totaly and replace it by black image.
        size: 256
        cot_stages: ["Black1D"]  # ['edges', 'sam', 'sam_edges', 'sketch', 'RGB', 'Black1D', 'Black_White']
        cot_process_type: "with_norm"  # ["with_norm", "no_norm"] --> "with_norm" should be with raw image
        gray_flg: False  #[True, False]
        palette: False # [True, False]  If activated --> will add palette to the input (e.g., sketch) Will get the palette from pixilation.

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 1
        max_images: 12
        increase_log_steps: False


  trainer:
    benchmark: True
    max_epochs: 400
